// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// predict_datapoints
IntegerVector predict_datapoints(arma::mat& data, arma::mat& centroids);
RcppExport SEXP _HiTMapper_predict_datapoints(SEXP dataSEXP, SEXP centroidsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type centroids(centroidsSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_datapoints(data, centroids));
    return rcpp_result_gen;
END_RCPP
}
// get_edgelist
arma::mat get_edgelist(arma::mat& idx);
RcppExport SEXP _HiTMapper_get_edgelist(SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_edgelist(idx));
    return rcpp_result_gen;
END_RCPP
}
// sample_cells
arma::ivec sample_cells(arma::ivec& mapping, arma::ivec& uniq, int m);
RcppExport SEXP _HiTMapper_sample_cells(SEXP mappingSEXP, SEXP uniqSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type uniq(uniqSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_cells(mapping, uniq, m));
    return rcpp_result_gen;
END_RCPP
}
// compute_centroids
arma::mat compute_centroids(arma::mat& data, arma::ivec& mapping, int k);
RcppExport SEXP _HiTMapper_compute_centroids(SEXP dataSEXP, SEXP mappingSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_centroids(data, mapping, k));
    return rcpp_result_gen;
END_RCPP
}
// clustering_main
arma::mat clustering_main(arma::mat& data, arma::mat& cova, arma::uvec& grid_size, int total_nodes, int min_node_size, int n_passes);
RcppExport SEXP _HiTMapper_clustering_main(SEXP dataSEXP, SEXP covaSEXP, SEXP grid_sizeSEXP, SEXP total_nodesSEXP, SEXP min_node_sizeSEXP, SEXP n_passesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cova(covaSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type grid_size(grid_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type total_nodes(total_nodesSEXP);
    Rcpp::traits::input_parameter< int >::type min_node_size(min_node_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_passes(n_passesSEXP);
    rcpp_result_gen = Rcpp::wrap(clustering_main(data, cova, grid_size, total_nodes, min_node_size, n_passes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HiTMapper_predict_datapoints", (DL_FUNC) &_HiTMapper_predict_datapoints, 2},
    {"_HiTMapper_get_edgelist", (DL_FUNC) &_HiTMapper_get_edgelist, 1},
    {"_HiTMapper_sample_cells", (DL_FUNC) &_HiTMapper_sample_cells, 3},
    {"_HiTMapper_compute_centroids", (DL_FUNC) &_HiTMapper_compute_centroids, 3},
    {"_HiTMapper_clustering_main", (DL_FUNC) &_HiTMapper_clustering_main, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_HiTMapper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
